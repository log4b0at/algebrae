
const { sqrt, pow, log, exp, abs, sin, round, asin } = Math;

const { performance } = require('perf_hooks');
const { gamma, p1gamma } = require('./Gamma');

let i = 0, log_average_err = 0, functions_evaluations = [], functions_types = [];

function add(x, exact) {
	const func = gamma;
	const start = performance.now();
	const result = func(x);
	const end = performance.now();
	const error = abs(result/exact - 1) || 2 ** -54;
	const time = end - start;
	functions_evaluations.push({
		f: 'Gamma('+x+')',
		x,
		exact, 
		result,
		error,
		time,
		i
	});
	log_average_err += log(error)/log(10);
	i++;
	return error;
}

function end_function_type(title)
{
	console.log('\n********  ',title, '  ********\n')
	console.table(functions_evaluations.map( ({f,  x, exact, result, error, time }) => { 
		let str = f.toString();
		return {
			"x": x,
			"function": str ,
			
			"closest ieee754":exact, 
			"result":result,
			
			"real error": parseFloat(error.toPrecision(3)),
			"µs": round(time*1000),
		};}
	));
	
	const min = functions_evaluations.reduce((acc, e) => e.error < acc.error ? e : acc, functions_evaluations[0])
	const max = functions_evaluations.reduce((acc, e) => e.error > acc.error ? e : acc, functions_evaluations[0])
	const average_time = functions_evaluations.reduce((acc, e) => acc + e.time, 0) / functions_evaluations.length;
	const average_log_error = functions_evaluations.reduce((acc, e) => acc + log(e.error), 0) / functions_evaluations.length;
	const variance =  functions_evaluations.reduce((acc, e) => acc + (log(e.error) - average_log_error)**2, 0 ) / functions_evaluations.length
	functions_types.push({
		title, min, max, average_time, average_log_error, variance
	})
	functions_evaluations = [];
	i = 0;
}

function end_test()
{
	console.log('\n\n\n\n');
	console.table(functions_types.map(({variance, average_log_error, min, max, average_time, title}) => {return {
		"function type": title,
		"average log10 error": parseFloat((average_log_error / log(10)).toFixed(3)),
		"average µs": round(average_time * 1000),
		"best": min.i,
		"worst": max.i,
		"σ log10 error": parseFloat(sqrt(variance).toPrecision(3))
	}}))
}

/*
add(null, 0, 1);
add(null, 1, 1);
add(null, 2, 2);
add(null, 3, 6);
add(null, 4, 24);
add(null, 5, 120);
add(null, 6, 720);
add(null, 10, 3628800);
add(null, 15, 1307674368000);
add(null, 20, 2432902008176640000);
add(null, 30, 265252859812191058636308480000000);
add(null, 50, 3.0414093201713378044e64);
add(null, 75, 2.4809140811395398092e109);
add(null, 100, 9.3326215443944152682e157);
add(null, 150, 5.7133839564458545905e262);*/

const values = [NaN, 0.88622692545275801365*2, 1.0000000000000000000,0.88622692545275801365,1.0000000000000000000,1.3293403881791370205,2.0000000000000000000,3.3233509704478425512,6.0000000000000000000,11.631728396567448929,24.000000000000000000,52.342777784553520181,120.00000000000000000,287.88527781504436100,720.00000000000000000,1871.2543057977883465,5040.0000000000000000,14034.407293483412599,40320.000000000000000,119292.46199460900709,362880.00000000000000,1.1332783889487855673e6,3.6288000000000000000e6,1.1899423083962248457e7,3.9916800000000000000e7,1.3684336546556585726e8,4.7900160000000000000e8,1.7105420683195732157e9,6.2270208000000000000e9,2.3092317922314238412e10,8.7178291200000000000e10,3.3483860987355645697e11,1.3076743680000000000e12,5.1899984530401250831e12,2.0922789888000000000e13,8.5634974475162063871e13,3.5568742809600000000e14,1.4986120533153361177e15,6.4023737057280000000e15,2.7724322986333718178e16,1.2164510040883200000e17,5.4062429823350750447e17,2.4329020081766400000e18,1.1082798113786903842e19,5.1090942171709440000e19,2.3828015944641843260e20,1.1240007277776076800e21,5.3613035875444147334e21,2.5852016738884976640e22,1.2599063430729374624e23,6.2044840173323943936e23,3.0867705405286967828e24,1.5511210043330985984e25,7.8712648783481767961e25,4.0329146112660563558e26,2.0858851927622668510e27,1.0888869450418352161e28,5.7361842800962338401e28,3.0488834461171386050e29,1.6348125198274266444e30,8.8417619937397019545e30,4.8226969334909086011e31,2.6525285981219105864e32,1.4709225647147271233e33,8.2228386541779228177e33,4.6334060788513904385e34,2.6313083693369353017e35,1.5058569756267018925e36,8.6833176188118864955e36,5.0446208683494513399e37,2.9523279903960414085e38,1.7403941995805607123e39,1.0333147966386144930e40,6.1783994085109905286e40,3.7199332678990121747e41,2.2551157841065115429e42,1.3763753091226345046e43,8.4566841903994182860e43,5.2302261746660111176e44,3.2558234133037760401e45,2.0397882081197443359e46,1.2860502482549915358e47,8.1591528324789773435e47,5.2085035054327157201e48,3.3452526613163807108e49,2.1615289547545770239e50,1.4050061177528798985e51,9.1864980577069523514e51,6.0415263063373835637e52,3.9961266551025242729e53,2.6582715747884487680e54,1.7782763615206233014e55,1.1962222086548019456e56,8.0911574449188360215e56,5.5026221598120889499e57,3.7623882118872587500e58,2.5862324151116818064e59,1.7871344006464479062e60,1.2413915592536072671e61,8.6676018431352723453e61,6.0828186403426756087e62,4.2904629123519598109e63,3.0414093201713378044e64,2.1666837707377397045e65,1.5511187532873822802e66,1.1158421419299359478e67,8.0658175170943878572e67,5.8581712451321637261e68,4.2748832840600255643e69,3.1341216161457075935e70,2.3084369733924138047e71,1.7080962807994106384e72,1.2696403353658275926e73,9.4799343584367290433e73,7.1099858780486345185e74,5.3561629125167519095e75,4.0526919504877216756e76,3.0797936746971323479e77,2.3505613312828785718e78,1.8016792996978224235e79,1.3868311854568983574e80,1.0719991833202043420e81,8.3209871127413901443e81,6.4855950590872362692e82,5.0758021387722479880e83,3.9886409613386503055e84,3.1469973260387937526e85,2.4929006008366564410e86,1.9826083154044400641e87,1.5829918815312768400e88,1.2688693218588416410e89,1.0210297635876735618e90,8.2476505920824706667e90,6.6877449514992618298e91,5.4434493907744306400e92,4.4473503927470091168e93,3.6471110918188685288e94,3.0019615151042311539e95,2.4800355424368305996e96,2.0563436378463983404e97,1.7112245242814131137e98,1.4291588283032468466e99,1.1978571669969891796e100,1.0075569739537890268e101,8.5047858856786231752e101,7.2040323637695915419e102,6.1234458376886086862e103,5.2229234637329538679e104,4.4701154615126843409e105,3.8388487458437210929e106,3.3078854415193864123e107,2.8599423156535722142e108,2.4809140811395398092e109,2.1592564483184470217e110,1.8854947016660502550e111,1.6518311829636119716e112,1.4518309202828586963e113,1.2801691667967992780e114,1.1324281178206297831e115,1.0049327959354874332e116,8.9461821307829752869e116,7.9892157276871250942e117,7.1569457046263802295e118,6.4313186607881357008e119,5.7971260207473679859e120,5.2415247085423305962e121,4.7536433370128417484e122,4.3242578845474227418e123,3.9455239697206586512e124,3.6107553335970979894e125,3.3142401345653532670e126,3.0510882568895478011e127,2.8171041143805502769e128,2.6086804596405633699e129,2.4227095383672732382e130,2.2565085975890873150e131,2.1077572983795277172e132,1.9744450228904514006e133,1.8548264225739843911e134,1.7473838452580494895e135,1.6507955160908461081e136,1.5639085415059542931e137,1.4857159644817614973e138,1.4153372300628886353e139,1.3520015276784029626e140,1.2950335655075431013e141,1.2438414054641307255e142,1.1979060480944773687e143,1.1567725070816415748e144,1.1200421549683363397e145,1.0873661566567430803e146,1.0584398364450778410e147,1.0329978488239059263e148,1.0108100438050493382e149,9.9167793487094968921e149,9.7543169227187261136e150,9.6192759682482119853e151,9.5104589996507579607e152,9.4268904488832477456e153,9.3678021146559965913e154,9.3326215443944152682e155,9.3209631040827166083e156,9.3326215443944152682e157,9.3675679196031301914e158,9.4259477598383594209e159,9.5080814383971771443e160,9.6144667150351266093e161,9.7457834743571065729e162,9.9029007164861804075e163,1.0086885895959605303e165,1.0299016745145627624e166,1.0540795761277787542e167,1.0813967582402909005e168,1.1120539528148065856e169,1.1462805637347083545e170,1.1843374597477690137e171,1.2265202031961379394e172,1.2731627692288516897e173,1.3246418194518289745e174,1.3813816046133040834e175,1.4438595832024935822e176,1.5126128570515679713e177,1.5882455415227429404e178,1.6714372070419826083e179,1.7629525510902446639e180,1.8636524858518106082e181,1.9745068572210740235e182,2.0966090465832869342e183,2.2311927486598136466e184,2.3796512678720306704e185,2.5435597334721875571e186,2.7247007017134751176e187,2.9250936934930156907e188,3.1470293104790637608e189,3.3931086844518982012e190,3.6662891467081092813e191,3.9699371608087208954e192,4.3078897473820284055e193,4.6845258497542906566e194,5.1048493506477036606e195,5.5745857612076058813e196,6.1002949740240058744e197,6.6895029134491270576e198,7.3508554436989270786e199,8.0942985252734437397e200,8.9312893640941964005e201,9.8750442008336013624e202,1.0940829471015390591e204,1.2146304367025329676e205,1.3511924396704007379e206,1.5061417415111408798e207,1.6822345873896489187e208,1.8826771768889260997e209,2.1112044071740093930e210,2.3721732428800468857e211,2.6706735750751218822e212,3.0126600184576595448e213,3.4051088082207803998e214,3.8562048236258042174e215,4.3755648185637028137e216,4.9745042224772874404e217,5.6663564400399951437e218,6.4668554892204736725e219,7.3945951542521936626e220,8.4715806908788205110e221,9.7238926278416346663e222,1.1182486511960043074e224,1.2884157731890165933e225,1.4872707060906857289e226,1.7200350572073371520e227,1.9929427461615188767e228,2.3134471519438684695e229,2.6904727073180504836e230,3.1347208908839417761e231,3.6590428819525486577e232,4.2788940160565805244e233,5.0128887482749916610e234,5.8834792720777982211e235,6.9177864726194884922e236,8.1486187918277505362e237,9.6157231969410890042e238,1.1367323214599711998e240,1.3462012475717524606e241,1.5971089116512595357e242,1.8981437590761709694e243,2.2599091099865322431e244,2.6953641378881627766e245,3.2203704817308084463e246,3.8543707171800727705e247,4.6212316412837101205e248,5.5502938327393047896e249,6.6776797216549611241e250,8.0479260574719919448e251,9.7160239950079684356e252,1.1749972043909108239e254,1.4233975152686673758e255,1.7272458904546389112e256,2.0995113350212843793e257,2.5563239178728655886e258,3.1177743325066073033e259,3.8089226376305697270e260,4.6610726270973779184e261,5.7133839564458545905e262,7.0149143037815537673e263,8.6272097742332404316e264,1.0627595170229053957e266,1.3113358856834525456e267,1.6207082634599307285e268,2.0063439050956823948e269,2.4877871844109936683e270,3.0897696138473508880e271,3.8436311999149852174e272,4.7891429014633938763e273,5.9768465158678020131e274,7.4710629262828944471e275,9.3537647973331101506e276,1.1729568794264144282e278,1.4732179555799648487e279,1.8532718694937347965e280,2.3350504595942442852e281,2.9467022724950383265e282,3.7244054830528196349e283,4.7147236359920613224e284,5.9776708002997755140e285,7.5907050539472187291e286,9.6539383424841374552e287,1.2296942187394494341e289,1.5687649806536723365e290,2.0044015765453025776e291,2.5649307433687542701e292,3.2872185855342962273e293,4.2193110728416007743e294,5.4239106661315887750e295,6.9829598255528492815e296,9.0036917057784373665e297,1.1626628109545494054e299,1.5036165148649990402e300,1.9474602083488702540e301,2.5260757449731983875e302,3.2814704510678463780e303,4.2690680090047052749e304,5.5620924145599996107e305,7.2574156153079989674e306]

for (let i = 0; i < values.length; i++)
	add((i)/2, values[i]);

end_function_type("n on [0; 170]")

const values2 = [3.6256099082219083119,7.5339415987976119047,15.481281081592398156,31.452835177076061273,63.438020469891310987,127.43045641142965881,255.42663404633623156,511.42471263063157445,1023.4237493455678304,2047.4232670563505464,4095.4230257497716411,8191.4229050559521904,16383.422844698905282,32767.422814517846947,65535.422799426683985,131071.42279188094405,262143.42278810803446,524287.42278622156977,1.0485754227852783349e6,2.0971514227848067169e6,4.1943034227845709077e6,8.3886074227844530031e6,1.6777215422784394051e7,3.3554431422784364575e7,6.7108863422784349837e7,1.3421772742278434247e8,2.6843545542278433878e8,5.3687091142278433694e8,1.0737418234227843360e9,2.1474836474227843356e9,4.2949672954227843353e9,8.5899345914227843352e9,1.7179869183422784335e10,3.4359738367422784335e10,6.8719476735422784335e10,1.3743895347142278434e11,2.7487790694342278434e11,5.4975581388742278434e11,1.0995116277754227843e12,2.1990232555514227843e12,4.3980465111034227843e12,8.7960930222074227843e12,1.7592186044415422784e13,3.5184372088831422784e13,7.0368744177663422784e13,1.4073748835532742278e14,2.8147497671065542278e14,5.6294995342131142278e14,1.1258999068426234228e15,2.2517998136852474228e15,4.5035996273704954228e15];

for (let i = 0; i < values2.length; i++)
	add(2**(-i-2), values2[i]);

end_function_type("2^-n on [2, 52]")

const values3 = [-3.5449077018110320546,2.3632718012073547031,-0.94530872048294188123,0.27008820585226910892,-0.060019601300504246427,0.010912654781909862987,-0.0016788699664476712287,0.00022384932885968949716,-0.000026335215159963470255,2.7721279115751021321e-6,-2.6401218205477163162e-7,2.2957581048241011446e-8,-1.8366064838592809156e-9,1.3604492473031710486e-10,-9.3824086020908348181e-12,6.0531668400586031085e-13,-3.6685859636718806718e-14,2.0963348363839318125e-15,-1.1331539656129361148e-16,5.8110459775022364864e-18,-2.8346565743913348714e-19,1.3184449183215511030e-20,-5.8597551925402271243e-22,2.4935128478894583508e-23,-1.0177603460773299391e-24,3.9912170434405095651e-26,-1.5061196390341545529e-27,5.4767986873969256468e-29,-1.9216837499638335603e-30,6.5141822032672324077e-32,-2.1357974436941745599e-33,6.7803093450608716187e-35,-2.0862490292494989596e-36,6.2276090425358177899e-38,-1.8051040703002370405e-39,5.0848001980288367339e-41,-1.3930959446654347216e-42,3.7149225191078259243e-44,-9.6491494002800673359e-46,2.4428226329822955281e-47,-6.0316608221785074767e-49,1.4534122463080740908e-50,-3.4197935207248802136e-52,7.8615943005169660083e-54,-1.7666504046105541592e-55,3.8827481420012179322e-57,-8.3499960043036944779e-59,1.7578938956428830480e-60,-3.6245234961708928824e-62,7.3222696892341270352e-64,-1.4499543939077479278e-65,2.8154454250635882093e-67,-5.3627531905973108748e-69,1.0023837739434225934e-70,-1.8392362824649955842e-72,3.3139392476846767284e-74,-5.8653791994419057139e-76,1.0200659477290270807e-77,-1.7437024747504736422e-79,2.9305923945386111634e-81,-4.8439543711382002700e-83,7.8763485709564232033e-85,-1.2602157713530277125e-86,1.9845917659102798622e-88,-3.0768864587756276934e-90,4.6975365782834010586e-92,-7.0639647793735354265e-94,1.0465133006479311743e-95,-1.5277566432816513493e-97,2.1982109975275558983e-99,-3.1180297837270296430e-101,4.3608808164014400602e-103,-6.0150080226226759451e-105,8.1836843845206475443e-107,-1.0984811254390130932e-108,1.4549418879986928387e-110,-1.9018848209133239721e-112,2.4540449302107406092e-114,-3.1261718856187778461e-116,3.9322916800236199322e-118,-4.8848343851225092325e-120,5.9936618222362076473e-122,-7.2650446330135850270e-124,8.7006522551060898527e-126,-1.0296629887699514619e-127,1.2042841973917560957e-129,-1.3922360663488509777e-131,1.5911269329701154031e-133,-1.7978835400792264442e-135,2.0088084246695267533e-137,-2.2196778173143942025e-139,2.4258773959720155219e-141,-2.6225701578075843480e-143,2.8048878693129244364e-145,-2.9681353114422480808e-147,3.1079950905154430166e-149,-3.2207203010522725560e-151,3.3033028728741256985e-153,-3.3536069775371834502e-155,3.3704592739067170354e-157,-3.3536908198076786422e-159,3.3041288865100282189e-161,-3.2235403770829543599e-163,3.1145317652975404444e-165,-2.9804131725335315257e-167,2.8250361824962384130e-169,-2.6526161337992848948e-171,2.4675498919063115301e-173,-2.2742395317108862028e-175,2.0769310791880239295e-177,-1.8795756372742298005e-179,1.6857180603356321081e-181,-1.4984160536316729849e-183,1.3201903556226193700e-185,-1.1530046773996675720e-187,9.9827244796508014896e-190,-8.5688622142925334674e-192,7.2926486930149220999e-194,-6.1541339181560524050e-196,5.1499028603816338117e-198,-4.2737783073706504662e-200,3.5175130101816053219e-202,-2.8714391919849839363e-204,2.3250519773157764666e-206,-1.8675116283660855154e-208,1.4880570743952872632e-210,-1.1763297030792784690e-212,9.2261153182688507370e-215,-7.1798562788084441533e-217,5.5442905627864433616e-219,-4.2484985155451673269e-221,3.2307973502244618455e-223,-2.4383376228109146004e-225,1.8264701294463779778e-227,-1.3579703564657085337e-229,1.0021921449931428293e-231,-7.3420669962867606542e-234,5.3396850882085532031e-236,-3.8553682947354174752e-238,2.7637048707780770431e-240,-1.9670497300911580378e-242,1.3901411520078855391e-244,-9.7553765053184950111e-247,6.7981717807097526210e-249,-4.7046171492801056201e-251,3.2334138483024780894e-253,-2.2071084288754116651e-255,1.4963446975426519764e-257,-1.0076395269647488056e-259,6.7400637255167144189e-262,-4.4784476581506408099e-264,2.9560710614855714917e-266,-1.9384072534331616339e-268,1.2628060282952193055e-270,-8.1735018012635553752e-273,5.2562712548318684085e-275,-3.3586397794452833281e-277,2.1324697012351005258e-279,-1.3454067515678867671e-281,8.4351520474475659376e-284,-5.2555464470078292446e-286,3.2542083263206373032e-288,-2.0025897392742383404e-290,1.2248255286080968443e-292,-7.4457478942741449501e-295,4.4989413258454048037e-297,-2.7020668623696124947e-299,1.6131742461908134297e-301,-9.5737343987585366746e-304,5.6482208842233254718e-306,-3.3127395215386073148e-308,1.9316265431711996005e-310,-1.1197835032876519423e-312,6.4540835924360342496e-315,-3.6986152392183577362e-317]

for (let i = 0; i < values3.length-5; i++)
	add(-i - 1 + 0.5, values3[i]);

end_function_type("n + 1/2 on [-2, -170]")

end_test()